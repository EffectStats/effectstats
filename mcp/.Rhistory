.libPaths(c("~/R/library", .libPaths()))
library(mcpr)
Rscript -e 'remotes::install_github("devOpifex/mcpr", lib="~/R/library")'
Rscript -e 'remotes::install_github("devOpifex/mcpr", lib="~/R/library")'
:q
R
.libPaths(c('~/R/library', .libPaths()))
.libPaths(c('~/R/library', .libPaths()))
library(mcpr)
Rscript -e "remotes::install_github('devOpifex/mcpr', lib='~/R/library')"
install.packages("remotes", lib="~/R/library")
remotes::install_github("devOpifex/mcpr", lib="~/R/library")
library(mcpr)
install.packages("yyjsonr", type="binary", lib="~/R/library")
nix-shell -p clang pkgconfig gettext
q()
install.packages("remotes", lib="~/R/library")
remotes::install_github("devOpifex/mcpr", lib="~/R/library")
library(mcpr)
install.packages("roxygen2", lib="~/R/library", repos="https://cloud.r-project.org")
.libPaths(c('~/R/library', .libPaths()))
remotes::install_github("devOpifex/mcpr", lib="~/R/library")
library(mcpr)
?mcpr
??mcpr
mcpr_prop <- mcpr::convert_ellmer_type_to_mcpr_property("some_ellmer_type")
print(mcpr_prop)
mcpr_prop <- mcpr::convert_ellmer_type_to_mcpr_property("some_ellmer_type")
mcpr_prop <- mcpr:::convert_ellmer_type_to_mcpr_property("some_ellmer_type")
print(mcpr_prop)
ellmer_type <- new(
  "ellmer_type",
  name = "example_type",
  description = "This is a test type",
  properties = list(foo = "bar")
)
library(mcpr)
ellmer_type <- new(
  "ellmer_type",
  name = "example_type",
  description = "This is a test type",
  properties = list(foo = "bar")
)
ellmer_type <- new(
  "ellmer_type",
  name = "example_type",
  description = "This is a test type",
  properties = list(foo = "bar")
)
remotes::install_github("devOpifex/ellmer")
install.packages("languageserver")
ellmer_type <- new(
  "ellmer_type",
  name = "example_type",
  description = "This is a test type",
  properties = list(foo = "bar")
)
setClass("ellmer_type",
  representation(
    name = "character",
    description = "character",
    properties = "list"
  )
)
ellmer_type <- new("ellmer_type",
  name = "example_type",
  description = "This is a test type",
  properties = list(foo = "bar")
)
q()
.libPaths(c("~/R/library", .libPaths()))
library(mcpr)

Rscript -e 'remotes::install_github("devOpifex/mcpr", lib="~/R/library")'
Rscript -e 'remotes::install_github("devOpifex/mcpr", lib="~/R/library")'

:q
R
.libPaths(c('~/R/library', .libPaths()))
.libPaths(c('~/R/library', .libPaths()))
library(mcpr)
Rscript -e "remotes::install_github('devOpifex/mcpr', lib='~/R/library')"

install.packages("remotes", lib="~/R/library")

remotes::install_github("devOpifex/mcpr", lib="~/R/library")

library(mcpr)

install.packages("yyjsonr", type="binary", lib="~/R/library")

nix-shell -p clang pkgconfig gettext

q()
